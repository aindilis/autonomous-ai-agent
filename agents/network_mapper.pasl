:- module(network_mapper, []).
:- include('/var/lib/myfrdcsa/codebases/minor/agentspeak-l-swi-prolog-meta-interpreter/src/state-exporter.pl').

%% %% /var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/modules/manager_dialog.pl

%% % Load standard library components
%% :- use_module('/var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/autonomous_ai_agent/prolog_modules/spami_web_navigation.pl').
%% :- use_module('/var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/autonomous_ai_agent/prolog_modules/spami_text_processing.pl').
%% :- use_module('/var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/autonomous_ai_agent/prolog_modules/spami_data_extraction.pl').
%% :- use_module('/var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/autonomous_ai_agent/prolog_modules/spami_knowledge_representation.pl').
%% :- use_module('/var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/autonomous_ai_agent/prolog_modules/spami_remote_execution.pl').
%% :- use_module('/var/lib/myfrdcsa/codebases/minor/prolog-agent/attempts/3/autonomous_ai_agent/prolog_modules/spami_safety_protocols.pl').

% Dynamic predicates for knowledge base
:- dynamic software_system/1.
:- dynamic system_metadata/2.

% Agent initialization
+!initialize_agent <-
	true.
	%% !setup_remote_environment;
	%% !load_knowledge_base;
	%% !set_initial_goals.

% Set up remote execution environment
+!setup_remote_environment <-
	remote_execution:create_sandbox_vm(VM_ID);
	+current_vm(VM_ID).

% Load existing knowledge base
+!load_knowledge_base <-
	knowledge_representation:load_kb('software_systems.pl').

% Set initial goals for the agent
+!set_initial_goals <-
	+goal(extract_metadata_from_web).

% Main agent loop
+!run <-
	!perceive;
	!reason;
	!act;
	!reflect;
	.wait(1000); % Wait for 1 second before next cycle
	!run.

% Perception: Gather information from the environment
+!perceive <-
	?current_vm(VM_ID);
	remote_execution:get_vm_state(VM_ID, State);
	+current_state(State).

% Reasoning: Decide on the next action based on current state and goals
+!reason <-
	?goal(CurrentGoal);
	?current_state(State);
	planning:generate_plan(CurrentGoal, State, Plan);
	+current_plan(Plan).

% Action: Execute the current plan
+!act <-
	?current_plan([NextAction|RestPlan]);
	!execute(NextAction);
	-+current_plan(RestPlan).

% Reflection: Analyze the results of actions and update knowledge
+!reflect <-
	?current_state(State);
	analysis:evaluate_progress(State);
	!update_knowledge_base.

% Execute specific actions
+!execute(browse_website(URL)) <-
	?current_vm(VM_ID);
	web_navigation:safe_browse(VM_ID, URL).

+!execute(extract_text(URL, Text)) <-
	?current_vm(VM_ID);
	text_processing:extract_text_from_url(VM_ID, URL, Text).

+!execute(extract_metadata(Text, Metadata)) <-
	data_extraction:extract_software_metadata(Text, Metadata).

+!execute(store_metadata(SystemName, Metadata)) <-
	+software_system(SystemName);
	+system_metadata(SystemName, Metadata).

% Update knowledge base with new information
+!update_knowledge_base <-
	findall(system(Name, Metadata); 
	(   software_system(Name); system_metadata(Name, Metadata)); 
		Systems);
	knowledge_representation:update_kb('software_systems.pl', Systems).

% Safety check before any action
+!execute(Action) : safety_protocols:is_safe_action(Action) <-
	!do_execute(Action).

-!execute(Action) <-
	.print("Unsafe action detected: ", Action);
	safety_protocols:log_unsafe_action(Action).

% Actual execution of an action
+!do_execute(Action) <-
	.print("Executing: ", Action);
	Action.

% Handle plan failure
-!act <-
	.print("Plan failed, regenerating...");
	!reason.

% Example goal: Extract metadata from web
+!extract_metadata_from_web <-
	!execute(browse_website("https://example.com/software"));
	!execute(extract_text("https://example.com/software", Text));
	!execute(extract_metadata(Text, Metadata));
	!execute(store_metadata("ExampleSoftware", Metadata)).
